-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.12 from Parser.y
-----------------------------------------------------------------------------

state 18 contains 12 reduce/reduce conflicts.
state 32 contains 3 shift/reduce conflicts.
state 33 contains 13 reduce/reduce conflicts.
state 62 contains 2 shift/reduce conflicts.
state 63 contains 2 shift/reduce conflicts.
state 64 contains 2 shift/reduce conflicts.
state 65 contains 2 shift/reduce conflicts.
state 66 contains 2 shift/reduce conflicts.
state 67 contains 1 shift/reduce conflicts.
state 68 contains 1 shift/reduce conflicts.
state 69 contains 3 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parse -> Fun                                (0)
	Fun -> fun main '(' ')' '{' Commands '}'           (1)
	Fun ->                                             (2)
	Commands -> Command Commands                       (3)
	Commands ->                                        (4)
	Command -> Decl                                    (5)
	Command -> Assign                                  (6)
	Command -> Aexp                                    (7)
	Command -> Bexp                                    (8)
	Command -> If                                      (9)
	Command -> While                                   (10)
	Command -> Print                                   (11)
	Command -> Readln                                  (12)
	Readln -> readln '(' ')'                           (13)
	Print -> print '(' Aexp ')'                        (14)
	Print -> print '(' Bexp ')'                        (15)
	Print -> print '(' str ')'                         (16)
	If -> if '(' Bexp ')' '{' Commands '}'             (17)
	If -> if '(' Bexp ')' '{' Commands '}' else '{' Commands '}'   (18)
	While -> while '(' Bexp ')' '{' Commands '}'       (19)
	Type -> int                                        (20)
	Type -> float                                      (21)
	Type -> boolean                                    (22)
	Type -> string                                     (23)
	Decl -> var id '=' Aexp                            (24)
	Decl -> var id '=' Bexp                            (25)
	Decl -> var id ':' Type '=' Aexp                   (26)
	Decl -> var id ':' Type '=' Bexp                   (27)
	Decl -> val id '=' Aexp                            (28)
	Decl -> val id '=' Bexp                            (29)
	Decl -> val id ':' Type '=' Aexp                   (30)
	Decl -> val id ':' Type '=' Bexp                   (31)
	Assign -> id '=' Aexp                              (32)
	Assign -> id '=' Bexp                              (33)
	Aexp -> num                                        (34)
	Aexp -> id                                         (35)
	Aexp -> Aexp '+' Aexp                              (36)
	Aexp -> Aexp '-' Aexp                              (37)
	Aexp -> Aexp '*' Aexp                              (38)
	Aexp -> Aexp '/' Aexp                              (39)
	Aexp -> Aexp '%' Aexp                              (40)
	Aexp -> Aexp "++"                                  (41)
	Aexp -> Aexp "--"                                  (42)
	Bexp -> true                                       (43)
	Bexp -> false                                      (44)
	Bexp -> id                                         (45)
	Bexp -> Bexp "&&" Bexp                             (46)
	Bexp -> Bexp "||" Bexp                             (47)
	Bexp -> Aexp '>' Aexp                              (48)
	Bexp -> Aexp ">=" Aexp                             (49)
	Bexp -> Aexp '<' Aexp                              (50)
	Bexp -> Aexp "<=" Aexp                             (51)
	Bexp -> Aexp "==" Aexp                             (52)
	Bexp -> Bexp "!=" Bexp                             (53)
	Bexp -> '!' Bexp                                   (54)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	id             { ID $$ }
	num            { NUM $$ }
	str            { STR $$ }
	'('            { LPAREN }
	')'            { RPAREN }
	'{'            { LBRACE }
	'}'            { RBRACE }
	if             { IF }
	else           { ELSE }
	while          { WHILE }
	int            { INT }
	float          { FLOAT }
	boolean        { BOOLEAN }
	string         { STRING }
	fun            { FUN }
	main           { MAIN }
	val            { VAL }
	var            { VAR }
	'+'            { PLUS }
	'-'            { MINUS }
	'*'            { MULT }
	'/'            { DIV }
	'%'            { MOD }
	'>'            { G }
	">="           { GEQ }
	'<'            { L }
	"<="           { LEQ }
	"=="           { EQUAL }
	"!="           { NEQUAL }
	"&&"           { AND }
	"||"           { OR }
	'!'            { NOT }
	"++"           { ICR }
	"--"           { DCR }
	'='            { ATRIB }
	true           { TRUE }
	false          { FALSE }
	readln         { READLN }
	print          { PRINT }
	':'            { COLON }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parse    rule  0
	Fun             rules 1, 2
	Commands        rules 3, 4
	Command         rules 5, 6, 7, 8, 9, 10, 11, 12
	Readln          rule  13
	Print           rules 14, 15, 16
	If              rules 17, 18
	While           rule  19
	Type            rules 20, 21, 22, 23
	Decl            rules 24, 25, 26, 27, 28, 29, 30, 31
	Assign          rules 32, 33
	Aexp            rules 34, 35, 36, 37, 38, 39, 40, 41, 42
	Bexp            rules 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	fun            shift, and enter state 2
	%eof           reduce using rule 2

	Fun            goto state 3

State 1


	fun            shift, and enter state 2


State 2

	Fun -> fun . main '(' ')' '{' Commands '}'          (rule 1)

	main           shift, and enter state 4


State 3

	%start_parse -> Fun .                               (rule 0)

	%eof           accept


State 4

	Fun -> fun main . '(' ')' '{' Commands '}'          (rule 1)

	'('            shift, and enter state 5


State 5

	Fun -> fun main '(' . ')' '{' Commands '}'          (rule 1)

	')'            shift, and enter state 6


State 6

	Fun -> fun main '(' ')' . '{' Commands '}'          (rule 1)

	'{'            shift, and enter state 7


State 7

	Fun -> fun main '(' ')' '{' . Commands '}'          (rule 1)

	id             shift, and enter state 18
	num            shift, and enter state 19
	'}'            reduce using rule 4
	if             shift, and enter state 20
	while          shift, and enter state 21
	val            shift, and enter state 22
	var            shift, and enter state 23
	'!'            shift, and enter state 24
	true           shift, and enter state 25
	false          shift, and enter state 26
	readln         shift, and enter state 27
	print          shift, and enter state 28

	Commands       goto state 8
	Command        goto state 9
	Readln         goto state 10
	Print          goto state 11
	If             goto state 12
	While          goto state 13
	Decl           goto state 14
	Assign         goto state 15
	Aexp           goto state 16
	Bexp           goto state 17

State 8

	Fun -> fun main '(' ')' '{' Commands . '}'          (rule 1)

	'}'            shift, and enter state 55


State 9

	Commands -> Command . Commands                      (rule 3)

	id             shift, and enter state 18
	num            shift, and enter state 19
	'}'            reduce using rule 4
	if             shift, and enter state 20
	while          shift, and enter state 21
	val            shift, and enter state 22
	var            shift, and enter state 23
	'!'            shift, and enter state 24
	true           shift, and enter state 25
	false          shift, and enter state 26
	readln         shift, and enter state 27
	print          shift, and enter state 28

	Commands       goto state 54
	Command        goto state 9
	Readln         goto state 10
	Print          goto state 11
	If             goto state 12
	While          goto state 13
	Decl           goto state 14
	Assign         goto state 15
	Aexp           goto state 16
	Bexp           goto state 17

State 10

	Command -> Readln .                                 (rule 12)

	id             reduce using rule 12
	num            reduce using rule 12
	'}'            reduce using rule 12
	if             reduce using rule 12
	while          reduce using rule 12
	val            reduce using rule 12
	var            reduce using rule 12
	'!'            reduce using rule 12
	true           reduce using rule 12
	false          reduce using rule 12
	readln         reduce using rule 12
	print          reduce using rule 12


State 11

	Command -> Print .                                  (rule 11)

	id             reduce using rule 11
	num            reduce using rule 11
	'}'            reduce using rule 11
	if             reduce using rule 11
	while          reduce using rule 11
	val            reduce using rule 11
	var            reduce using rule 11
	'!'            reduce using rule 11
	true           reduce using rule 11
	false          reduce using rule 11
	readln         reduce using rule 11
	print          reduce using rule 11


State 12

	Command -> If .                                     (rule 9)

	id             reduce using rule 9
	num            reduce using rule 9
	'}'            reduce using rule 9
	if             reduce using rule 9
	while          reduce using rule 9
	val            reduce using rule 9
	var            reduce using rule 9
	'!'            reduce using rule 9
	true           reduce using rule 9
	false          reduce using rule 9
	readln         reduce using rule 9
	print          reduce using rule 9


State 13

	Command -> While .                                  (rule 10)

	id             reduce using rule 10
	num            reduce using rule 10
	'}'            reduce using rule 10
	if             reduce using rule 10
	while          reduce using rule 10
	val            reduce using rule 10
	var            reduce using rule 10
	'!'            reduce using rule 10
	true           reduce using rule 10
	false          reduce using rule 10
	readln         reduce using rule 10
	print          reduce using rule 10


State 14

	Command -> Decl .                                   (rule 5)

	id             reduce using rule 5
	num            reduce using rule 5
	'}'            reduce using rule 5
	if             reduce using rule 5
	while          reduce using rule 5
	val            reduce using rule 5
	var            reduce using rule 5
	'!'            reduce using rule 5
	true           reduce using rule 5
	false          reduce using rule 5
	readln         reduce using rule 5
	print          reduce using rule 5


State 15

	Command -> Assign .                                 (rule 6)

	id             reduce using rule 6
	num            reduce using rule 6
	'}'            reduce using rule 6
	if             reduce using rule 6
	while          reduce using rule 6
	val            reduce using rule 6
	var            reduce using rule 6
	'!'            reduce using rule 6
	true           reduce using rule 6
	false          reduce using rule 6
	readln         reduce using rule 6
	print          reduce using rule 6


State 16

	Command -> Aexp .                                   (rule 7)
	Aexp -> Aexp . '+' Aexp                             (rule 36)
	Aexp -> Aexp . '-' Aexp                             (rule 37)
	Aexp -> Aexp . '*' Aexp                             (rule 38)
	Aexp -> Aexp . '/' Aexp                             (rule 39)
	Aexp -> Aexp . '%' Aexp                             (rule 40)
	Aexp -> Aexp . "++"                                 (rule 41)
	Aexp -> Aexp . "--"                                 (rule 42)
	Bexp -> Aexp . '>' Aexp                             (rule 48)
	Bexp -> Aexp . ">=" Aexp                            (rule 49)
	Bexp -> Aexp . '<' Aexp                             (rule 50)
	Bexp -> Aexp . "<=" Aexp                            (rule 51)
	Bexp -> Aexp . "==" Aexp                            (rule 52)

	id             reduce using rule 7
	num            reduce using rule 7
	'}'            reduce using rule 7
	if             reduce using rule 7
	while          reduce using rule 7
	val            reduce using rule 7
	var            reduce using rule 7
	'+'            shift, and enter state 42
	'-'            shift, and enter state 43
	'*'            shift, and enter state 44
	'/'            shift, and enter state 45
	'%'            shift, and enter state 46
	'>'            shift, and enter state 47
	">="           shift, and enter state 48
	'<'            shift, and enter state 49
	"<="           shift, and enter state 50
	"=="           shift, and enter state 51
	'!'            reduce using rule 7
	"++"           shift, and enter state 52
	"--"           shift, and enter state 53
	true           reduce using rule 7
	false          reduce using rule 7
	readln         reduce using rule 7
	print          reduce using rule 7


State 17

	Command -> Bexp .                                   (rule 8)
	Bexp -> Bexp . "&&" Bexp                            (rule 46)
	Bexp -> Bexp . "||" Bexp                            (rule 47)
	Bexp -> Bexp . "!=" Bexp                            (rule 53)

	id             reduce using rule 8
	num            reduce using rule 8
	'}'            reduce using rule 8
	if             reduce using rule 8
	while          reduce using rule 8
	val            reduce using rule 8
	var            reduce using rule 8
	"!="           shift, and enter state 39
	"&&"           shift, and enter state 40
	"||"           shift, and enter state 41
	'!'            reduce using rule 8
	true           reduce using rule 8
	false          reduce using rule 8
	readln         reduce using rule 8
	print          reduce using rule 8


State 18

	Assign -> id . '=' Aexp                             (rule 32)
	Assign -> id . '=' Bexp                             (rule 33)
	Aexp -> id .                                        (rule 35)
	Bexp -> id .                                        (rule 45)

	id             reduce using rule 45
			(reduce using rule 35)

	num            reduce using rule 45
			(reduce using rule 35)

	'}'            reduce using rule 45
			(reduce using rule 35)

	if             reduce using rule 45
			(reduce using rule 35)

	while          reduce using rule 45
			(reduce using rule 35)

	val            reduce using rule 45
			(reduce using rule 35)

	var            reduce using rule 45
			(reduce using rule 35)

	'+'            reduce using rule 35
	'-'            reduce using rule 35
	'*'            reduce using rule 35
	'/'            reduce using rule 35
	'%'            reduce using rule 35
	'>'            reduce using rule 35
	">="           reduce using rule 35
	'<'            reduce using rule 35
	"<="           reduce using rule 35
	"=="           reduce using rule 35
	"!="           reduce using rule 45
	"&&"           reduce using rule 45
	"||"           reduce using rule 45
	'!'            reduce using rule 45
			(reduce using rule 35)

	"++"           reduce using rule 35
	"--"           reduce using rule 35
	'='            shift, and enter state 38
	true           reduce using rule 45
			(reduce using rule 35)

	false          reduce using rule 45
			(reduce using rule 35)

	readln         reduce using rule 45
			(reduce using rule 35)

	print          reduce using rule 45
			(reduce using rule 35)



State 19

	Aexp -> num .                                       (rule 34)

	id             reduce using rule 34
	num            reduce using rule 34
	')'            reduce using rule 34
	'}'            reduce using rule 34
	if             reduce using rule 34
	while          reduce using rule 34
	val            reduce using rule 34
	var            reduce using rule 34
	'+'            reduce using rule 34
	'-'            reduce using rule 34
	'*'            reduce using rule 34
	'/'            reduce using rule 34
	'%'            reduce using rule 34
	'>'            reduce using rule 34
	">="           reduce using rule 34
	'<'            reduce using rule 34
	"<="           reduce using rule 34
	"=="           reduce using rule 34
	"!="           reduce using rule 34
	"&&"           reduce using rule 34
	"||"           reduce using rule 34
	'!'            reduce using rule 34
	"++"           reduce using rule 34
	"--"           reduce using rule 34
	true           reduce using rule 34
	false          reduce using rule 34
	readln         reduce using rule 34
	print          reduce using rule 34


State 20

	If -> if . '(' Bexp ')' '{' Commands '}'            (rule 17)
	If -> if . '(' Bexp ')' '{' Commands '}' else '{' Commands '}'    (rule 18)

	'('            shift, and enter state 37


State 21

	While -> while . '(' Bexp ')' '{' Commands '}'      (rule 19)

	'('            shift, and enter state 36


State 22

	Decl -> val . id '=' Aexp                           (rule 28)
	Decl -> val . id '=' Bexp                           (rule 29)
	Decl -> val . id ':' Type '=' Aexp                  (rule 30)
	Decl -> val . id ':' Type '=' Bexp                  (rule 31)

	id             shift, and enter state 35


State 23

	Decl -> var . id '=' Aexp                           (rule 24)
	Decl -> var . id '=' Bexp                           (rule 25)
	Decl -> var . id ':' Type '=' Aexp                  (rule 26)
	Decl -> var . id ':' Type '=' Bexp                  (rule 27)

	id             shift, and enter state 34


State 24

	Bexp -> '!' . Bexp                                  (rule 54)

	id             shift, and enter state 33
	num            shift, and enter state 19
	'!'            shift, and enter state 24
	true           shift, and enter state 25
	false          shift, and enter state 26

	Aexp           goto state 31
	Bexp           goto state 32

State 25

	Bexp -> true .                                      (rule 43)

	id             reduce using rule 43
	num            reduce using rule 43
	')'            reduce using rule 43
	'}'            reduce using rule 43
	if             reduce using rule 43
	while          reduce using rule 43
	val            reduce using rule 43
	var            reduce using rule 43
	"!="           reduce using rule 43
	"&&"           reduce using rule 43
	"||"           reduce using rule 43
	'!'            reduce using rule 43
	true           reduce using rule 43
	false          reduce using rule 43
	readln         reduce using rule 43
	print          reduce using rule 43


State 26

	Bexp -> false .                                     (rule 44)

	id             reduce using rule 44
	num            reduce using rule 44
	')'            reduce using rule 44
	'}'            reduce using rule 44
	if             reduce using rule 44
	while          reduce using rule 44
	val            reduce using rule 44
	var            reduce using rule 44
	"!="           reduce using rule 44
	"&&"           reduce using rule 44
	"||"           reduce using rule 44
	'!'            reduce using rule 44
	true           reduce using rule 44
	false          reduce using rule 44
	readln         reduce using rule 44
	print          reduce using rule 44


State 27

	Readln -> readln . '(' ')'                          (rule 13)

	'('            shift, and enter state 30


State 28

	Print -> print . '(' Aexp ')'                       (rule 14)
	Print -> print . '(' Bexp ')'                       (rule 15)
	Print -> print . '(' str ')'                        (rule 16)

	'('            shift, and enter state 29


State 29

	Print -> print '(' . Aexp ')'                       (rule 14)
	Print -> print '(' . Bexp ')'                       (rule 15)
	Print -> print '(' . str ')'                        (rule 16)

	id             shift, and enter state 33
	num            shift, and enter state 19
	str            shift, and enter state 81
	'!'            shift, and enter state 24
	true           shift, and enter state 25
	false          shift, and enter state 26

	Aexp           goto state 79
	Bexp           goto state 80

State 30

	Readln -> readln '(' . ')'                          (rule 13)

	')'            shift, and enter state 78


State 31

	Aexp -> Aexp . '+' Aexp                             (rule 36)
	Aexp -> Aexp . '-' Aexp                             (rule 37)
	Aexp -> Aexp . '*' Aexp                             (rule 38)
	Aexp -> Aexp . '/' Aexp                             (rule 39)
	Aexp -> Aexp . '%' Aexp                             (rule 40)
	Aexp -> Aexp . "++"                                 (rule 41)
	Aexp -> Aexp . "--"                                 (rule 42)
	Bexp -> Aexp . '>' Aexp                             (rule 48)
	Bexp -> Aexp . ">=" Aexp                            (rule 49)
	Bexp -> Aexp . '<' Aexp                             (rule 50)
	Bexp -> Aexp . "<=" Aexp                            (rule 51)
	Bexp -> Aexp . "==" Aexp                            (rule 52)

	'+'            shift, and enter state 42
	'-'            shift, and enter state 43
	'*'            shift, and enter state 44
	'/'            shift, and enter state 45
	'%'            shift, and enter state 46
	'>'            shift, and enter state 47
	">="           shift, and enter state 48
	'<'            shift, and enter state 49
	"<="           shift, and enter state 50
	"=="           shift, and enter state 51
	"++"           shift, and enter state 52
	"--"           shift, and enter state 53


State 32

	Bexp -> Bexp . "&&" Bexp                            (rule 46)
	Bexp -> Bexp . "||" Bexp                            (rule 47)
	Bexp -> Bexp . "!=" Bexp                            (rule 53)
	Bexp -> '!' Bexp .                                  (rule 54)

	id             reduce using rule 54
	num            reduce using rule 54
	')'            reduce using rule 54
	'}'            reduce using rule 54
	if             reduce using rule 54
	while          reduce using rule 54
	val            reduce using rule 54
	var            reduce using rule 54
	"!="           shift, and enter state 39
			(reduce using rule 54)

	"&&"           shift, and enter state 40
			(reduce using rule 54)

	"||"           shift, and enter state 41
			(reduce using rule 54)

	'!'            reduce using rule 54
	true           reduce using rule 54
	false          reduce using rule 54
	readln         reduce using rule 54
	print          reduce using rule 54


State 33

	Aexp -> id .                                        (rule 35)
	Bexp -> id .                                        (rule 45)

	id             reduce using rule 45
			(reduce using rule 35)

	num            reduce using rule 45
			(reduce using rule 35)

	')'            reduce using rule 45
			(reduce using rule 35)

	'}'            reduce using rule 45
			(reduce using rule 35)

	if             reduce using rule 45
			(reduce using rule 35)

	while          reduce using rule 45
			(reduce using rule 35)

	val            reduce using rule 45
			(reduce using rule 35)

	var            reduce using rule 45
			(reduce using rule 35)

	'+'            reduce using rule 35
	'-'            reduce using rule 35
	'*'            reduce using rule 35
	'/'            reduce using rule 35
	'%'            reduce using rule 35
	'>'            reduce using rule 35
	">="           reduce using rule 35
	'<'            reduce using rule 35
	"<="           reduce using rule 35
	"=="           reduce using rule 35
	"!="           reduce using rule 45
	"&&"           reduce using rule 45
	"||"           reduce using rule 45
	'!'            reduce using rule 45
			(reduce using rule 35)

	"++"           reduce using rule 35
	"--"           reduce using rule 35
	true           reduce using rule 45
			(reduce using rule 35)

	false          reduce using rule 45
			(reduce using rule 35)

	readln         reduce using rule 45
			(reduce using rule 35)

	print          reduce using rule 45
			(reduce using rule 35)



State 34

	Decl -> var id . '=' Aexp                           (rule 24)
	Decl -> var id . '=' Bexp                           (rule 25)
	Decl -> var id . ':' Type '=' Aexp                  (rule 26)
	Decl -> var id . ':' Type '=' Bexp                  (rule 27)

	'='            shift, and enter state 76
	':'            shift, and enter state 77


State 35

	Decl -> val id . '=' Aexp                           (rule 28)
	Decl -> val id . '=' Bexp                           (rule 29)
	Decl -> val id . ':' Type '=' Aexp                  (rule 30)
	Decl -> val id . ':' Type '=' Bexp                  (rule 31)

	'='            shift, and enter state 74
	':'            shift, and enter state 75


State 36

	While -> while '(' . Bexp ')' '{' Commands '}'      (rule 19)

	id             shift, and enter state 33
	num            shift, and enter state 19
	'!'            shift, and enter state 24
	true           shift, and enter state 25
	false          shift, and enter state 26

	Aexp           goto state 31
	Bexp           goto state 73

State 37

	If -> if '(' . Bexp ')' '{' Commands '}'            (rule 17)
	If -> if '(' . Bexp ')' '{' Commands '}' else '{' Commands '}'    (rule 18)

	id             shift, and enter state 33
	num            shift, and enter state 19
	'!'            shift, and enter state 24
	true           shift, and enter state 25
	false          shift, and enter state 26

	Aexp           goto state 31
	Bexp           goto state 72

State 38

	Assign -> id '=' . Aexp                             (rule 32)
	Assign -> id '=' . Bexp                             (rule 33)

	id             shift, and enter state 33
	num            shift, and enter state 19
	'!'            shift, and enter state 24
	true           shift, and enter state 25
	false          shift, and enter state 26

	Aexp           goto state 70
	Bexp           goto state 71

State 39

	Bexp -> Bexp "!=" . Bexp                            (rule 53)

	id             shift, and enter state 33
	num            shift, and enter state 19
	'!'            shift, and enter state 24
	true           shift, and enter state 25
	false          shift, and enter state 26

	Aexp           goto state 31
	Bexp           goto state 69

State 40

	Bexp -> Bexp "&&" . Bexp                            (rule 46)

	id             shift, and enter state 33
	num            shift, and enter state 19
	'!'            shift, and enter state 24
	true           shift, and enter state 25
	false          shift, and enter state 26

	Aexp           goto state 31
	Bexp           goto state 68

State 41

	Bexp -> Bexp "||" . Bexp                            (rule 47)

	id             shift, and enter state 33
	num            shift, and enter state 19
	'!'            shift, and enter state 24
	true           shift, and enter state 25
	false          shift, and enter state 26

	Aexp           goto state 31
	Bexp           goto state 67

State 42

	Aexp -> Aexp '+' . Aexp                             (rule 36)

	id             shift, and enter state 57
	num            shift, and enter state 19

	Aexp           goto state 66

State 43

	Aexp -> Aexp '-' . Aexp                             (rule 37)

	id             shift, and enter state 57
	num            shift, and enter state 19

	Aexp           goto state 65

State 44

	Aexp -> Aexp '*' . Aexp                             (rule 38)

	id             shift, and enter state 57
	num            shift, and enter state 19

	Aexp           goto state 64

State 45

	Aexp -> Aexp '/' . Aexp                             (rule 39)

	id             shift, and enter state 57
	num            shift, and enter state 19

	Aexp           goto state 63

State 46

	Aexp -> Aexp '%' . Aexp                             (rule 40)

	id             shift, and enter state 57
	num            shift, and enter state 19

	Aexp           goto state 62

State 47

	Bexp -> Aexp '>' . Aexp                             (rule 48)

	id             shift, and enter state 57
	num            shift, and enter state 19

	Aexp           goto state 61

State 48

	Bexp -> Aexp ">=" . Aexp                            (rule 49)

	id             shift, and enter state 57
	num            shift, and enter state 19

	Aexp           goto state 60

State 49

	Bexp -> Aexp '<' . Aexp                             (rule 50)

	id             shift, and enter state 57
	num            shift, and enter state 19

	Aexp           goto state 59

State 50

	Bexp -> Aexp "<=" . Aexp                            (rule 51)

	id             shift, and enter state 57
	num            shift, and enter state 19

	Aexp           goto state 58

State 51

	Bexp -> Aexp "==" . Aexp                            (rule 52)

	id             shift, and enter state 57
	num            shift, and enter state 19

	Aexp           goto state 56

State 52

	Aexp -> Aexp "++" .                                 (rule 41)

	id             reduce using rule 41
	num            reduce using rule 41
	')'            reduce using rule 41
	'}'            reduce using rule 41
	if             reduce using rule 41
	while          reduce using rule 41
	val            reduce using rule 41
	var            reduce using rule 41
	'+'            reduce using rule 41
	'-'            reduce using rule 41
	'*'            reduce using rule 41
	'/'            reduce using rule 41
	'%'            reduce using rule 41
	'>'            reduce using rule 41
	">="           reduce using rule 41
	'<'            reduce using rule 41
	"<="           reduce using rule 41
	"=="           reduce using rule 41
	"!="           reduce using rule 41
	"&&"           reduce using rule 41
	"||"           reduce using rule 41
	'!'            reduce using rule 41
	"++"           reduce using rule 41
	"--"           reduce using rule 41
	true           reduce using rule 41
	false          reduce using rule 41
	readln         reduce using rule 41
	print          reduce using rule 41


State 53

	Aexp -> Aexp "--" .                                 (rule 42)

	id             reduce using rule 42
	num            reduce using rule 42
	')'            reduce using rule 42
	'}'            reduce using rule 42
	if             reduce using rule 42
	while          reduce using rule 42
	val            reduce using rule 42
	var            reduce using rule 42
	'+'            reduce using rule 42
	'-'            reduce using rule 42
	'*'            reduce using rule 42
	'/'            reduce using rule 42
	'%'            reduce using rule 42
	'>'            reduce using rule 42
	">="           reduce using rule 42
	'<'            reduce using rule 42
	"<="           reduce using rule 42
	"=="           reduce using rule 42
	"!="           reduce using rule 42
	"&&"           reduce using rule 42
	"||"           reduce using rule 42
	'!'            reduce using rule 42
	"++"           reduce using rule 42
	"--"           reduce using rule 42
	true           reduce using rule 42
	false          reduce using rule 42
	readln         reduce using rule 42
	print          reduce using rule 42


State 54

	Commands -> Command Commands .                      (rule 3)

	'}'            reduce using rule 3


State 55

	Fun -> fun main '(' ')' '{' Commands '}' .          (rule 1)

	%eof           reduce using rule 1


State 56

	Aexp -> Aexp . '+' Aexp                             (rule 36)
	Aexp -> Aexp . '-' Aexp                             (rule 37)
	Aexp -> Aexp . '*' Aexp                             (rule 38)
	Aexp -> Aexp . '/' Aexp                             (rule 39)
	Aexp -> Aexp . '%' Aexp                             (rule 40)
	Aexp -> Aexp . "++"                                 (rule 41)
	Aexp -> Aexp . "--"                                 (rule 42)
	Bexp -> Aexp "==" Aexp .                            (rule 52)

	id             reduce using rule 52
	num            reduce using rule 52
	')'            reduce using rule 52
	'}'            reduce using rule 52
	if             reduce using rule 52
	while          reduce using rule 52
	val            reduce using rule 52
	var            reduce using rule 52
	'+'            shift, and enter state 42
	'-'            shift, and enter state 43
	'*'            shift, and enter state 44
	'/'            shift, and enter state 45
	'%'            shift, and enter state 46
	"!="           reduce using rule 52
	"&&"           reduce using rule 52
	"||"           reduce using rule 52
	'!'            reduce using rule 52
	"++"           shift, and enter state 52
	"--"           shift, and enter state 53
	true           reduce using rule 52
	false          reduce using rule 52
	readln         reduce using rule 52
	print          reduce using rule 52


State 57

	Aexp -> id .                                        (rule 35)

	id             reduce using rule 35
	num            reduce using rule 35
	')'            reduce using rule 35
	'}'            reduce using rule 35
	if             reduce using rule 35
	while          reduce using rule 35
	val            reduce using rule 35
	var            reduce using rule 35
	'+'            reduce using rule 35
	'-'            reduce using rule 35
	'*'            reduce using rule 35
	'/'            reduce using rule 35
	'%'            reduce using rule 35
	'>'            reduce using rule 35
	">="           reduce using rule 35
	'<'            reduce using rule 35
	"<="           reduce using rule 35
	"=="           reduce using rule 35
	"!="           reduce using rule 35
	"&&"           reduce using rule 35
	"||"           reduce using rule 35
	'!'            reduce using rule 35
	"++"           reduce using rule 35
	"--"           reduce using rule 35
	true           reduce using rule 35
	false          reduce using rule 35
	readln         reduce using rule 35
	print          reduce using rule 35


State 58

	Aexp -> Aexp . '+' Aexp                             (rule 36)
	Aexp -> Aexp . '-' Aexp                             (rule 37)
	Aexp -> Aexp . '*' Aexp                             (rule 38)
	Aexp -> Aexp . '/' Aexp                             (rule 39)
	Aexp -> Aexp . '%' Aexp                             (rule 40)
	Aexp -> Aexp . "++"                                 (rule 41)
	Aexp -> Aexp . "--"                                 (rule 42)
	Bexp -> Aexp "<=" Aexp .                            (rule 51)

	id             reduce using rule 51
	num            reduce using rule 51
	')'            reduce using rule 51
	'}'            reduce using rule 51
	if             reduce using rule 51
	while          reduce using rule 51
	val            reduce using rule 51
	var            reduce using rule 51
	'+'            shift, and enter state 42
	'-'            shift, and enter state 43
	'*'            shift, and enter state 44
	'/'            shift, and enter state 45
	'%'            shift, and enter state 46
	"!="           reduce using rule 51
	"&&"           reduce using rule 51
	"||"           reduce using rule 51
	'!'            reduce using rule 51
	"++"           shift, and enter state 52
	"--"           shift, and enter state 53
	true           reduce using rule 51
	false          reduce using rule 51
	readln         reduce using rule 51
	print          reduce using rule 51


State 59

	Aexp -> Aexp . '+' Aexp                             (rule 36)
	Aexp -> Aexp . '-' Aexp                             (rule 37)
	Aexp -> Aexp . '*' Aexp                             (rule 38)
	Aexp -> Aexp . '/' Aexp                             (rule 39)
	Aexp -> Aexp . '%' Aexp                             (rule 40)
	Aexp -> Aexp . "++"                                 (rule 41)
	Aexp -> Aexp . "--"                                 (rule 42)
	Bexp -> Aexp '<' Aexp .                             (rule 50)

	id             reduce using rule 50
	num            reduce using rule 50
	')'            reduce using rule 50
	'}'            reduce using rule 50
	if             reduce using rule 50
	while          reduce using rule 50
	val            reduce using rule 50
	var            reduce using rule 50
	'+'            shift, and enter state 42
	'-'            shift, and enter state 43
	'*'            shift, and enter state 44
	'/'            shift, and enter state 45
	'%'            shift, and enter state 46
	"!="           reduce using rule 50
	"&&"           reduce using rule 50
	"||"           reduce using rule 50
	'!'            reduce using rule 50
	"++"           shift, and enter state 52
	"--"           shift, and enter state 53
	true           reduce using rule 50
	false          reduce using rule 50
	readln         reduce using rule 50
	print          reduce using rule 50


State 60

	Aexp -> Aexp . '+' Aexp                             (rule 36)
	Aexp -> Aexp . '-' Aexp                             (rule 37)
	Aexp -> Aexp . '*' Aexp                             (rule 38)
	Aexp -> Aexp . '/' Aexp                             (rule 39)
	Aexp -> Aexp . '%' Aexp                             (rule 40)
	Aexp -> Aexp . "++"                                 (rule 41)
	Aexp -> Aexp . "--"                                 (rule 42)
	Bexp -> Aexp ">=" Aexp .                            (rule 49)

	id             reduce using rule 49
	num            reduce using rule 49
	')'            reduce using rule 49
	'}'            reduce using rule 49
	if             reduce using rule 49
	while          reduce using rule 49
	val            reduce using rule 49
	var            reduce using rule 49
	'+'            shift, and enter state 42
	'-'            shift, and enter state 43
	'*'            shift, and enter state 44
	'/'            shift, and enter state 45
	'%'            shift, and enter state 46
	"!="           reduce using rule 49
	"&&"           reduce using rule 49
	"||"           reduce using rule 49
	'!'            reduce using rule 49
	"++"           shift, and enter state 52
	"--"           shift, and enter state 53
	true           reduce using rule 49
	false          reduce using rule 49
	readln         reduce using rule 49
	print          reduce using rule 49


State 61

	Aexp -> Aexp . '+' Aexp                             (rule 36)
	Aexp -> Aexp . '-' Aexp                             (rule 37)
	Aexp -> Aexp . '*' Aexp                             (rule 38)
	Aexp -> Aexp . '/' Aexp                             (rule 39)
	Aexp -> Aexp . '%' Aexp                             (rule 40)
	Aexp -> Aexp . "++"                                 (rule 41)
	Aexp -> Aexp . "--"                                 (rule 42)
	Bexp -> Aexp '>' Aexp .                             (rule 48)

	id             reduce using rule 48
	num            reduce using rule 48
	')'            reduce using rule 48
	'}'            reduce using rule 48
	if             reduce using rule 48
	while          reduce using rule 48
	val            reduce using rule 48
	var            reduce using rule 48
	'+'            shift, and enter state 42
	'-'            shift, and enter state 43
	'*'            shift, and enter state 44
	'/'            shift, and enter state 45
	'%'            shift, and enter state 46
	"!="           reduce using rule 48
	"&&"           reduce using rule 48
	"||"           reduce using rule 48
	'!'            reduce using rule 48
	"++"           shift, and enter state 52
	"--"           shift, and enter state 53
	true           reduce using rule 48
	false          reduce using rule 48
	readln         reduce using rule 48
	print          reduce using rule 48


State 62

	Aexp -> Aexp . '+' Aexp                             (rule 36)
	Aexp -> Aexp . '-' Aexp                             (rule 37)
	Aexp -> Aexp . '*' Aexp                             (rule 38)
	Aexp -> Aexp . '/' Aexp                             (rule 39)
	Aexp -> Aexp . '%' Aexp                             (rule 40)
	Aexp -> Aexp '%' Aexp .                             (rule 40)
	Aexp -> Aexp . "++"                                 (rule 41)
	Aexp -> Aexp . "--"                                 (rule 42)

	id             reduce using rule 40
	num            reduce using rule 40
	')'            reduce using rule 40
	'}'            reduce using rule 40
	if             reduce using rule 40
	while          reduce using rule 40
	val            reduce using rule 40
	var            reduce using rule 40
	'+'            reduce using rule 40
	'-'            reduce using rule 40
	'*'            reduce using rule 40
	'/'            reduce using rule 40
	'%'            reduce using rule 40
	'>'            reduce using rule 40
	">="           reduce using rule 40
	'<'            reduce using rule 40
	"<="           reduce using rule 40
	"=="           reduce using rule 40
	"!="           reduce using rule 40
	"&&"           reduce using rule 40
	"||"           reduce using rule 40
	'!'            reduce using rule 40
	"++"           shift, and enter state 52
			(reduce using rule 40)

	"--"           shift, and enter state 53
			(reduce using rule 40)

	true           reduce using rule 40
	false          reduce using rule 40
	readln         reduce using rule 40
	print          reduce using rule 40


State 63

	Aexp -> Aexp . '+' Aexp                             (rule 36)
	Aexp -> Aexp . '-' Aexp                             (rule 37)
	Aexp -> Aexp . '*' Aexp                             (rule 38)
	Aexp -> Aexp . '/' Aexp                             (rule 39)
	Aexp -> Aexp '/' Aexp .                             (rule 39)
	Aexp -> Aexp . '%' Aexp                             (rule 40)
	Aexp -> Aexp . "++"                                 (rule 41)
	Aexp -> Aexp . "--"                                 (rule 42)

	id             reduce using rule 39
	num            reduce using rule 39
	')'            reduce using rule 39
	'}'            reduce using rule 39
	if             reduce using rule 39
	while          reduce using rule 39
	val            reduce using rule 39
	var            reduce using rule 39
	'+'            reduce using rule 39
	'-'            reduce using rule 39
	'*'            reduce using rule 39
	'/'            reduce using rule 39
	'%'            reduce using rule 39
	'>'            reduce using rule 39
	">="           reduce using rule 39
	'<'            reduce using rule 39
	"<="           reduce using rule 39
	"=="           reduce using rule 39
	"!="           reduce using rule 39
	"&&"           reduce using rule 39
	"||"           reduce using rule 39
	'!'            reduce using rule 39
	"++"           shift, and enter state 52
			(reduce using rule 39)

	"--"           shift, and enter state 53
			(reduce using rule 39)

	true           reduce using rule 39
	false          reduce using rule 39
	readln         reduce using rule 39
	print          reduce using rule 39


State 64

	Aexp -> Aexp . '+' Aexp                             (rule 36)
	Aexp -> Aexp . '-' Aexp                             (rule 37)
	Aexp -> Aexp . '*' Aexp                             (rule 38)
	Aexp -> Aexp '*' Aexp .                             (rule 38)
	Aexp -> Aexp . '/' Aexp                             (rule 39)
	Aexp -> Aexp . '%' Aexp                             (rule 40)
	Aexp -> Aexp . "++"                                 (rule 41)
	Aexp -> Aexp . "--"                                 (rule 42)

	id             reduce using rule 38
	num            reduce using rule 38
	')'            reduce using rule 38
	'}'            reduce using rule 38
	if             reduce using rule 38
	while          reduce using rule 38
	val            reduce using rule 38
	var            reduce using rule 38
	'+'            reduce using rule 38
	'-'            reduce using rule 38
	'*'            reduce using rule 38
	'/'            reduce using rule 38
	'%'            reduce using rule 38
	'>'            reduce using rule 38
	">="           reduce using rule 38
	'<'            reduce using rule 38
	"<="           reduce using rule 38
	"=="           reduce using rule 38
	"!="           reduce using rule 38
	"&&"           reduce using rule 38
	"||"           reduce using rule 38
	'!'            reduce using rule 38
	"++"           shift, and enter state 52
			(reduce using rule 38)

	"--"           shift, and enter state 53
			(reduce using rule 38)

	true           reduce using rule 38
	false          reduce using rule 38
	readln         reduce using rule 38
	print          reduce using rule 38


State 65

	Aexp -> Aexp . '+' Aexp                             (rule 36)
	Aexp -> Aexp . '-' Aexp                             (rule 37)
	Aexp -> Aexp '-' Aexp .                             (rule 37)
	Aexp -> Aexp . '*' Aexp                             (rule 38)
	Aexp -> Aexp . '/' Aexp                             (rule 39)
	Aexp -> Aexp . '%' Aexp                             (rule 40)
	Aexp -> Aexp . "++"                                 (rule 41)
	Aexp -> Aexp . "--"                                 (rule 42)

	id             reduce using rule 37
	num            reduce using rule 37
	')'            reduce using rule 37
	'}'            reduce using rule 37
	if             reduce using rule 37
	while          reduce using rule 37
	val            reduce using rule 37
	var            reduce using rule 37
	'+'            reduce using rule 37
	'-'            reduce using rule 37
	'*'            shift, and enter state 44
	'/'            shift, and enter state 45
	'%'            shift, and enter state 46
	'>'            reduce using rule 37
	">="           reduce using rule 37
	'<'            reduce using rule 37
	"<="           reduce using rule 37
	"=="           reduce using rule 37
	"!="           reduce using rule 37
	"&&"           reduce using rule 37
	"||"           reduce using rule 37
	'!'            reduce using rule 37
	"++"           shift, and enter state 52
			(reduce using rule 37)

	"--"           shift, and enter state 53
			(reduce using rule 37)

	true           reduce using rule 37
	false          reduce using rule 37
	readln         reduce using rule 37
	print          reduce using rule 37


State 66

	Aexp -> Aexp . '+' Aexp                             (rule 36)
	Aexp -> Aexp '+' Aexp .                             (rule 36)
	Aexp -> Aexp . '-' Aexp                             (rule 37)
	Aexp -> Aexp . '*' Aexp                             (rule 38)
	Aexp -> Aexp . '/' Aexp                             (rule 39)
	Aexp -> Aexp . '%' Aexp                             (rule 40)
	Aexp -> Aexp . "++"                                 (rule 41)
	Aexp -> Aexp . "--"                                 (rule 42)

	id             reduce using rule 36
	num            reduce using rule 36
	')'            reduce using rule 36
	'}'            reduce using rule 36
	if             reduce using rule 36
	while          reduce using rule 36
	val            reduce using rule 36
	var            reduce using rule 36
	'+'            reduce using rule 36
	'-'            reduce using rule 36
	'*'            shift, and enter state 44
	'/'            shift, and enter state 45
	'%'            shift, and enter state 46
	'>'            reduce using rule 36
	">="           reduce using rule 36
	'<'            reduce using rule 36
	"<="           reduce using rule 36
	"=="           reduce using rule 36
	"!="           reduce using rule 36
	"&&"           reduce using rule 36
	"||"           reduce using rule 36
	'!'            reduce using rule 36
	"++"           shift, and enter state 52
			(reduce using rule 36)

	"--"           shift, and enter state 53
			(reduce using rule 36)

	true           reduce using rule 36
	false          reduce using rule 36
	readln         reduce using rule 36
	print          reduce using rule 36


State 67

	Bexp -> Bexp . "&&" Bexp                            (rule 46)
	Bexp -> Bexp . "||" Bexp                            (rule 47)
	Bexp -> Bexp "||" Bexp .                            (rule 47)
	Bexp -> Bexp . "!=" Bexp                            (rule 53)

	id             reduce using rule 47
	num            reduce using rule 47
	')'            reduce using rule 47
	'}'            reduce using rule 47
	if             reduce using rule 47
	while          reduce using rule 47
	val            reduce using rule 47
	var            reduce using rule 47
	"!="           shift, and enter state 39
			(reduce using rule 47)

	"&&"           shift, and enter state 40
	"||"           reduce using rule 47
	'!'            reduce using rule 47
	true           reduce using rule 47
	false          reduce using rule 47
	readln         reduce using rule 47
	print          reduce using rule 47


State 68

	Bexp -> Bexp . "&&" Bexp                            (rule 46)
	Bexp -> Bexp "&&" Bexp .                            (rule 46)
	Bexp -> Bexp . "||" Bexp                            (rule 47)
	Bexp -> Bexp . "!=" Bexp                            (rule 53)

	id             reduce using rule 46
	num            reduce using rule 46
	')'            reduce using rule 46
	'}'            reduce using rule 46
	if             reduce using rule 46
	while          reduce using rule 46
	val            reduce using rule 46
	var            reduce using rule 46
	"!="           shift, and enter state 39
			(reduce using rule 46)

	"&&"           reduce using rule 46
	"||"           reduce using rule 46
	'!'            reduce using rule 46
	true           reduce using rule 46
	false          reduce using rule 46
	readln         reduce using rule 46
	print          reduce using rule 46


State 69

	Bexp -> Bexp . "&&" Bexp                            (rule 46)
	Bexp -> Bexp . "||" Bexp                            (rule 47)
	Bexp -> Bexp . "!=" Bexp                            (rule 53)
	Bexp -> Bexp "!=" Bexp .                            (rule 53)

	id             reduce using rule 53
	num            reduce using rule 53
	')'            reduce using rule 53
	'}'            reduce using rule 53
	if             reduce using rule 53
	while          reduce using rule 53
	val            reduce using rule 53
	var            reduce using rule 53
	"!="           shift, and enter state 39
			(reduce using rule 53)

	"&&"           shift, and enter state 40
			(reduce using rule 53)

	"||"           shift, and enter state 41
			(reduce using rule 53)

	'!'            reduce using rule 53
	true           reduce using rule 53
	false          reduce using rule 53
	readln         reduce using rule 53
	print          reduce using rule 53


State 70

	Assign -> id '=' Aexp .                             (rule 32)
	Aexp -> Aexp . '+' Aexp                             (rule 36)
	Aexp -> Aexp . '-' Aexp                             (rule 37)
	Aexp -> Aexp . '*' Aexp                             (rule 38)
	Aexp -> Aexp . '/' Aexp                             (rule 39)
	Aexp -> Aexp . '%' Aexp                             (rule 40)
	Aexp -> Aexp . "++"                                 (rule 41)
	Aexp -> Aexp . "--"                                 (rule 42)
	Bexp -> Aexp . '>' Aexp                             (rule 48)
	Bexp -> Aexp . ">=" Aexp                            (rule 49)
	Bexp -> Aexp . '<' Aexp                             (rule 50)
	Bexp -> Aexp . "<=" Aexp                            (rule 51)
	Bexp -> Aexp . "==" Aexp                            (rule 52)

	id             reduce using rule 32
	num            reduce using rule 32
	'}'            reduce using rule 32
	if             reduce using rule 32
	while          reduce using rule 32
	val            reduce using rule 32
	var            reduce using rule 32
	'+'            shift, and enter state 42
	'-'            shift, and enter state 43
	'*'            shift, and enter state 44
	'/'            shift, and enter state 45
	'%'            shift, and enter state 46
	'>'            shift, and enter state 47
	">="           shift, and enter state 48
	'<'            shift, and enter state 49
	"<="           shift, and enter state 50
	"=="           shift, and enter state 51
	'!'            reduce using rule 32
	"++"           shift, and enter state 52
	"--"           shift, and enter state 53
	true           reduce using rule 32
	false          reduce using rule 32
	readln         reduce using rule 32
	print          reduce using rule 32


State 71

	Assign -> id '=' Bexp .                             (rule 33)
	Bexp -> Bexp . "&&" Bexp                            (rule 46)
	Bexp -> Bexp . "||" Bexp                            (rule 47)
	Bexp -> Bexp . "!=" Bexp                            (rule 53)

	id             reduce using rule 33
	num            reduce using rule 33
	'}'            reduce using rule 33
	if             reduce using rule 33
	while          reduce using rule 33
	val            reduce using rule 33
	var            reduce using rule 33
	"!="           shift, and enter state 39
	"&&"           shift, and enter state 40
	"||"           shift, and enter state 41
	'!'            reduce using rule 33
	true           reduce using rule 33
	false          reduce using rule 33
	readln         reduce using rule 33
	print          reduce using rule 33


State 72

	If -> if '(' Bexp . ')' '{' Commands '}'            (rule 17)
	If -> if '(' Bexp . ')' '{' Commands '}' else '{' Commands '}'    (rule 18)
	Bexp -> Bexp . "&&" Bexp                            (rule 46)
	Bexp -> Bexp . "||" Bexp                            (rule 47)
	Bexp -> Bexp . "!=" Bexp                            (rule 53)

	')'            shift, and enter state 96
	"!="           shift, and enter state 39
	"&&"           shift, and enter state 40
	"||"           shift, and enter state 41


State 73

	While -> while '(' Bexp . ')' '{' Commands '}'      (rule 19)
	Bexp -> Bexp . "&&" Bexp                            (rule 46)
	Bexp -> Bexp . "||" Bexp                            (rule 47)
	Bexp -> Bexp . "!=" Bexp                            (rule 53)

	')'            shift, and enter state 95
	"!="           shift, and enter state 39
	"&&"           shift, and enter state 40
	"||"           shift, and enter state 41


State 74

	Decl -> val id '=' . Aexp                           (rule 28)
	Decl -> val id '=' . Bexp                           (rule 29)

	id             shift, and enter state 33
	num            shift, and enter state 19
	'!'            shift, and enter state 24
	true           shift, and enter state 25
	false          shift, and enter state 26

	Aexp           goto state 93
	Bexp           goto state 94

State 75

	Decl -> val id ':' . Type '=' Aexp                  (rule 30)
	Decl -> val id ':' . Type '=' Bexp                  (rule 31)

	int            shift, and enter state 86
	float          shift, and enter state 87
	boolean        shift, and enter state 88
	string         shift, and enter state 89

	Type           goto state 92

State 76

	Decl -> var id '=' . Aexp                           (rule 24)
	Decl -> var id '=' . Bexp                           (rule 25)

	id             shift, and enter state 33
	num            shift, and enter state 19
	'!'            shift, and enter state 24
	true           shift, and enter state 25
	false          shift, and enter state 26

	Aexp           goto state 90
	Bexp           goto state 91

State 77

	Decl -> var id ':' . Type '=' Aexp                  (rule 26)
	Decl -> var id ':' . Type '=' Bexp                  (rule 27)

	int            shift, and enter state 86
	float          shift, and enter state 87
	boolean        shift, and enter state 88
	string         shift, and enter state 89

	Type           goto state 85

State 78

	Readln -> readln '(' ')' .                          (rule 13)

	id             reduce using rule 13
	num            reduce using rule 13
	'}'            reduce using rule 13
	if             reduce using rule 13
	while          reduce using rule 13
	val            reduce using rule 13
	var            reduce using rule 13
	'!'            reduce using rule 13
	true           reduce using rule 13
	false          reduce using rule 13
	readln         reduce using rule 13
	print          reduce using rule 13


State 79

	Print -> print '(' Aexp . ')'                       (rule 14)
	Aexp -> Aexp . '+' Aexp                             (rule 36)
	Aexp -> Aexp . '-' Aexp                             (rule 37)
	Aexp -> Aexp . '*' Aexp                             (rule 38)
	Aexp -> Aexp . '/' Aexp                             (rule 39)
	Aexp -> Aexp . '%' Aexp                             (rule 40)
	Aexp -> Aexp . "++"                                 (rule 41)
	Aexp -> Aexp . "--"                                 (rule 42)
	Bexp -> Aexp . '>' Aexp                             (rule 48)
	Bexp -> Aexp . ">=" Aexp                            (rule 49)
	Bexp -> Aexp . '<' Aexp                             (rule 50)
	Bexp -> Aexp . "<=" Aexp                            (rule 51)
	Bexp -> Aexp . "==" Aexp                            (rule 52)

	')'            shift, and enter state 84
	'+'            shift, and enter state 42
	'-'            shift, and enter state 43
	'*'            shift, and enter state 44
	'/'            shift, and enter state 45
	'%'            shift, and enter state 46
	'>'            shift, and enter state 47
	">="           shift, and enter state 48
	'<'            shift, and enter state 49
	"<="           shift, and enter state 50
	"=="           shift, and enter state 51
	"++"           shift, and enter state 52
	"--"           shift, and enter state 53


State 80

	Print -> print '(' Bexp . ')'                       (rule 15)
	Bexp -> Bexp . "&&" Bexp                            (rule 46)
	Bexp -> Bexp . "||" Bexp                            (rule 47)
	Bexp -> Bexp . "!=" Bexp                            (rule 53)

	')'            shift, and enter state 83
	"!="           shift, and enter state 39
	"&&"           shift, and enter state 40
	"||"           shift, and enter state 41


State 81

	Print -> print '(' str . ')'                        (rule 16)

	')'            shift, and enter state 82


State 82

	Print -> print '(' str ')' .                        (rule 16)

	id             reduce using rule 16
	num            reduce using rule 16
	'}'            reduce using rule 16
	if             reduce using rule 16
	while          reduce using rule 16
	val            reduce using rule 16
	var            reduce using rule 16
	'!'            reduce using rule 16
	true           reduce using rule 16
	false          reduce using rule 16
	readln         reduce using rule 16
	print          reduce using rule 16


State 83

	Print -> print '(' Bexp ')' .                       (rule 15)

	id             reduce using rule 15
	num            reduce using rule 15
	'}'            reduce using rule 15
	if             reduce using rule 15
	while          reduce using rule 15
	val            reduce using rule 15
	var            reduce using rule 15
	'!'            reduce using rule 15
	true           reduce using rule 15
	false          reduce using rule 15
	readln         reduce using rule 15
	print          reduce using rule 15


State 84

	Print -> print '(' Aexp ')' .                       (rule 14)

	id             reduce using rule 14
	num            reduce using rule 14
	'}'            reduce using rule 14
	if             reduce using rule 14
	while          reduce using rule 14
	val            reduce using rule 14
	var            reduce using rule 14
	'!'            reduce using rule 14
	true           reduce using rule 14
	false          reduce using rule 14
	readln         reduce using rule 14
	print          reduce using rule 14


State 85

	Decl -> var id ':' Type . '=' Aexp                  (rule 26)
	Decl -> var id ':' Type . '=' Bexp                  (rule 27)

	'='            shift, and enter state 100


State 86

	Type -> int .                                       (rule 20)

	'='            reduce using rule 20


State 87

	Type -> float .                                     (rule 21)

	'='            reduce using rule 21


State 88

	Type -> boolean .                                   (rule 22)

	'='            reduce using rule 22


State 89

	Type -> string .                                    (rule 23)

	'='            reduce using rule 23


State 90

	Decl -> var id '=' Aexp .                           (rule 24)
	Aexp -> Aexp . '+' Aexp                             (rule 36)
	Aexp -> Aexp . '-' Aexp                             (rule 37)
	Aexp -> Aexp . '*' Aexp                             (rule 38)
	Aexp -> Aexp . '/' Aexp                             (rule 39)
	Aexp -> Aexp . '%' Aexp                             (rule 40)
	Aexp -> Aexp . "++"                                 (rule 41)
	Aexp -> Aexp . "--"                                 (rule 42)
	Bexp -> Aexp . '>' Aexp                             (rule 48)
	Bexp -> Aexp . ">=" Aexp                            (rule 49)
	Bexp -> Aexp . '<' Aexp                             (rule 50)
	Bexp -> Aexp . "<=" Aexp                            (rule 51)
	Bexp -> Aexp . "==" Aexp                            (rule 52)

	id             reduce using rule 24
	num            reduce using rule 24
	'}'            reduce using rule 24
	if             reduce using rule 24
	while          reduce using rule 24
	val            reduce using rule 24
	var            reduce using rule 24
	'+'            shift, and enter state 42
	'-'            shift, and enter state 43
	'*'            shift, and enter state 44
	'/'            shift, and enter state 45
	'%'            shift, and enter state 46
	'>'            shift, and enter state 47
	">="           shift, and enter state 48
	'<'            shift, and enter state 49
	"<="           shift, and enter state 50
	"=="           shift, and enter state 51
	'!'            reduce using rule 24
	"++"           shift, and enter state 52
	"--"           shift, and enter state 53
	true           reduce using rule 24
	false          reduce using rule 24
	readln         reduce using rule 24
	print          reduce using rule 24


State 91

	Decl -> var id '=' Bexp .                           (rule 25)
	Bexp -> Bexp . "&&" Bexp                            (rule 46)
	Bexp -> Bexp . "||" Bexp                            (rule 47)
	Bexp -> Bexp . "!=" Bexp                            (rule 53)

	id             reduce using rule 25
	num            reduce using rule 25
	'}'            reduce using rule 25
	if             reduce using rule 25
	while          reduce using rule 25
	val            reduce using rule 25
	var            reduce using rule 25
	"!="           shift, and enter state 39
	"&&"           shift, and enter state 40
	"||"           shift, and enter state 41
	'!'            reduce using rule 25
	true           reduce using rule 25
	false          reduce using rule 25
	readln         reduce using rule 25
	print          reduce using rule 25


State 92

	Decl -> val id ':' Type . '=' Aexp                  (rule 30)
	Decl -> val id ':' Type . '=' Bexp                  (rule 31)

	'='            shift, and enter state 99


State 93

	Decl -> val id '=' Aexp .                           (rule 28)
	Aexp -> Aexp . '+' Aexp                             (rule 36)
	Aexp -> Aexp . '-' Aexp                             (rule 37)
	Aexp -> Aexp . '*' Aexp                             (rule 38)
	Aexp -> Aexp . '/' Aexp                             (rule 39)
	Aexp -> Aexp . '%' Aexp                             (rule 40)
	Aexp -> Aexp . "++"                                 (rule 41)
	Aexp -> Aexp . "--"                                 (rule 42)
	Bexp -> Aexp . '>' Aexp                             (rule 48)
	Bexp -> Aexp . ">=" Aexp                            (rule 49)
	Bexp -> Aexp . '<' Aexp                             (rule 50)
	Bexp -> Aexp . "<=" Aexp                            (rule 51)
	Bexp -> Aexp . "==" Aexp                            (rule 52)

	id             reduce using rule 28
	num            reduce using rule 28
	'}'            reduce using rule 28
	if             reduce using rule 28
	while          reduce using rule 28
	val            reduce using rule 28
	var            reduce using rule 28
	'+'            shift, and enter state 42
	'-'            shift, and enter state 43
	'*'            shift, and enter state 44
	'/'            shift, and enter state 45
	'%'            shift, and enter state 46
	'>'            shift, and enter state 47
	">="           shift, and enter state 48
	'<'            shift, and enter state 49
	"<="           shift, and enter state 50
	"=="           shift, and enter state 51
	'!'            reduce using rule 28
	"++"           shift, and enter state 52
	"--"           shift, and enter state 53
	true           reduce using rule 28
	false          reduce using rule 28
	readln         reduce using rule 28
	print          reduce using rule 28


State 94

	Decl -> val id '=' Bexp .                           (rule 29)
	Bexp -> Bexp . "&&" Bexp                            (rule 46)
	Bexp -> Bexp . "||" Bexp                            (rule 47)
	Bexp -> Bexp . "!=" Bexp                            (rule 53)

	id             reduce using rule 29
	num            reduce using rule 29
	'}'            reduce using rule 29
	if             reduce using rule 29
	while          reduce using rule 29
	val            reduce using rule 29
	var            reduce using rule 29
	"!="           shift, and enter state 39
	"&&"           shift, and enter state 40
	"||"           shift, and enter state 41
	'!'            reduce using rule 29
	true           reduce using rule 29
	false          reduce using rule 29
	readln         reduce using rule 29
	print          reduce using rule 29


State 95

	While -> while '(' Bexp ')' . '{' Commands '}'      (rule 19)

	'{'            shift, and enter state 98


State 96

	If -> if '(' Bexp ')' . '{' Commands '}'            (rule 17)
	If -> if '(' Bexp ')' . '{' Commands '}' else '{' Commands '}'    (rule 18)

	'{'            shift, and enter state 97


State 97

	If -> if '(' Bexp ')' '{' . Commands '}'            (rule 17)
	If -> if '(' Bexp ')' '{' . Commands '}' else '{' Commands '}'    (rule 18)

	id             shift, and enter state 18
	num            shift, and enter state 19
	'}'            reduce using rule 4
	if             shift, and enter state 20
	while          shift, and enter state 21
	val            shift, and enter state 22
	var            shift, and enter state 23
	'!'            shift, and enter state 24
	true           shift, and enter state 25
	false          shift, and enter state 26
	readln         shift, and enter state 27
	print          shift, and enter state 28

	Commands       goto state 106
	Command        goto state 9
	Readln         goto state 10
	Print          goto state 11
	If             goto state 12
	While          goto state 13
	Decl           goto state 14
	Assign         goto state 15
	Aexp           goto state 16
	Bexp           goto state 17

State 98

	While -> while '(' Bexp ')' '{' . Commands '}'      (rule 19)

	id             shift, and enter state 18
	num            shift, and enter state 19
	'}'            reduce using rule 4
	if             shift, and enter state 20
	while          shift, and enter state 21
	val            shift, and enter state 22
	var            shift, and enter state 23
	'!'            shift, and enter state 24
	true           shift, and enter state 25
	false          shift, and enter state 26
	readln         shift, and enter state 27
	print          shift, and enter state 28

	Commands       goto state 105
	Command        goto state 9
	Readln         goto state 10
	Print          goto state 11
	If             goto state 12
	While          goto state 13
	Decl           goto state 14
	Assign         goto state 15
	Aexp           goto state 16
	Bexp           goto state 17

State 99

	Decl -> val id ':' Type '=' . Aexp                  (rule 30)
	Decl -> val id ':' Type '=' . Bexp                  (rule 31)

	id             shift, and enter state 33
	num            shift, and enter state 19
	'!'            shift, and enter state 24
	true           shift, and enter state 25
	false          shift, and enter state 26

	Aexp           goto state 103
	Bexp           goto state 104

State 100

	Decl -> var id ':' Type '=' . Aexp                  (rule 26)
	Decl -> var id ':' Type '=' . Bexp                  (rule 27)

	id             shift, and enter state 33
	num            shift, and enter state 19
	'!'            shift, and enter state 24
	true           shift, and enter state 25
	false          shift, and enter state 26

	Aexp           goto state 101
	Bexp           goto state 102

State 101

	Decl -> var id ':' Type '=' Aexp .                  (rule 26)
	Aexp -> Aexp . '+' Aexp                             (rule 36)
	Aexp -> Aexp . '-' Aexp                             (rule 37)
	Aexp -> Aexp . '*' Aexp                             (rule 38)
	Aexp -> Aexp . '/' Aexp                             (rule 39)
	Aexp -> Aexp . '%' Aexp                             (rule 40)
	Aexp -> Aexp . "++"                                 (rule 41)
	Aexp -> Aexp . "--"                                 (rule 42)
	Bexp -> Aexp . '>' Aexp                             (rule 48)
	Bexp -> Aexp . ">=" Aexp                            (rule 49)
	Bexp -> Aexp . '<' Aexp                             (rule 50)
	Bexp -> Aexp . "<=" Aexp                            (rule 51)
	Bexp -> Aexp . "==" Aexp                            (rule 52)

	id             reduce using rule 26
	num            reduce using rule 26
	'}'            reduce using rule 26
	if             reduce using rule 26
	while          reduce using rule 26
	val            reduce using rule 26
	var            reduce using rule 26
	'+'            shift, and enter state 42
	'-'            shift, and enter state 43
	'*'            shift, and enter state 44
	'/'            shift, and enter state 45
	'%'            shift, and enter state 46
	'>'            shift, and enter state 47
	">="           shift, and enter state 48
	'<'            shift, and enter state 49
	"<="           shift, and enter state 50
	"=="           shift, and enter state 51
	'!'            reduce using rule 26
	"++"           shift, and enter state 52
	"--"           shift, and enter state 53
	true           reduce using rule 26
	false          reduce using rule 26
	readln         reduce using rule 26
	print          reduce using rule 26


State 102

	Decl -> var id ':' Type '=' Bexp .                  (rule 27)
	Bexp -> Bexp . "&&" Bexp                            (rule 46)
	Bexp -> Bexp . "||" Bexp                            (rule 47)
	Bexp -> Bexp . "!=" Bexp                            (rule 53)

	id             reduce using rule 27
	num            reduce using rule 27
	'}'            reduce using rule 27
	if             reduce using rule 27
	while          reduce using rule 27
	val            reduce using rule 27
	var            reduce using rule 27
	"!="           shift, and enter state 39
	"&&"           shift, and enter state 40
	"||"           shift, and enter state 41
	'!'            reduce using rule 27
	true           reduce using rule 27
	false          reduce using rule 27
	readln         reduce using rule 27
	print          reduce using rule 27


State 103

	Decl -> val id ':' Type '=' Aexp .                  (rule 30)
	Aexp -> Aexp . '+' Aexp                             (rule 36)
	Aexp -> Aexp . '-' Aexp                             (rule 37)
	Aexp -> Aexp . '*' Aexp                             (rule 38)
	Aexp -> Aexp . '/' Aexp                             (rule 39)
	Aexp -> Aexp . '%' Aexp                             (rule 40)
	Aexp -> Aexp . "++"                                 (rule 41)
	Aexp -> Aexp . "--"                                 (rule 42)
	Bexp -> Aexp . '>' Aexp                             (rule 48)
	Bexp -> Aexp . ">=" Aexp                            (rule 49)
	Bexp -> Aexp . '<' Aexp                             (rule 50)
	Bexp -> Aexp . "<=" Aexp                            (rule 51)
	Bexp -> Aexp . "==" Aexp                            (rule 52)

	id             reduce using rule 30
	num            reduce using rule 30
	'}'            reduce using rule 30
	if             reduce using rule 30
	while          reduce using rule 30
	val            reduce using rule 30
	var            reduce using rule 30
	'+'            shift, and enter state 42
	'-'            shift, and enter state 43
	'*'            shift, and enter state 44
	'/'            shift, and enter state 45
	'%'            shift, and enter state 46
	'>'            shift, and enter state 47
	">="           shift, and enter state 48
	'<'            shift, and enter state 49
	"<="           shift, and enter state 50
	"=="           shift, and enter state 51
	'!'            reduce using rule 30
	"++"           shift, and enter state 52
	"--"           shift, and enter state 53
	true           reduce using rule 30
	false          reduce using rule 30
	readln         reduce using rule 30
	print          reduce using rule 30


State 104

	Decl -> val id ':' Type '=' Bexp .                  (rule 31)
	Bexp -> Bexp . "&&" Bexp                            (rule 46)
	Bexp -> Bexp . "||" Bexp                            (rule 47)
	Bexp -> Bexp . "!=" Bexp                            (rule 53)

	id             reduce using rule 31
	num            reduce using rule 31
	'}'            reduce using rule 31
	if             reduce using rule 31
	while          reduce using rule 31
	val            reduce using rule 31
	var            reduce using rule 31
	"!="           shift, and enter state 39
	"&&"           shift, and enter state 40
	"||"           shift, and enter state 41
	'!'            reduce using rule 31
	true           reduce using rule 31
	false          reduce using rule 31
	readln         reduce using rule 31
	print          reduce using rule 31


State 105

	While -> while '(' Bexp ')' '{' Commands . '}'      (rule 19)

	'}'            shift, and enter state 108


State 106

	If -> if '(' Bexp ')' '{' Commands . '}'            (rule 17)
	If -> if '(' Bexp ')' '{' Commands . '}' else '{' Commands '}'    (rule 18)

	'}'            shift, and enter state 107


State 107

	If -> if '(' Bexp ')' '{' Commands '}' .            (rule 17)
	If -> if '(' Bexp ')' '{' Commands '}' . else '{' Commands '}'    (rule 18)

	id             reduce using rule 17
	num            reduce using rule 17
	'}'            reduce using rule 17
	if             reduce using rule 17
	else           shift, and enter state 109
	while          reduce using rule 17
	val            reduce using rule 17
	var            reduce using rule 17
	'!'            reduce using rule 17
	true           reduce using rule 17
	false          reduce using rule 17
	readln         reduce using rule 17
	print          reduce using rule 17


State 108

	While -> while '(' Bexp ')' '{' Commands '}' .      (rule 19)

	id             reduce using rule 19
	num            reduce using rule 19
	'}'            reduce using rule 19
	if             reduce using rule 19
	while          reduce using rule 19
	val            reduce using rule 19
	var            reduce using rule 19
	'!'            reduce using rule 19
	true           reduce using rule 19
	false          reduce using rule 19
	readln         reduce using rule 19
	print          reduce using rule 19


State 109

	If -> if '(' Bexp ')' '{' Commands '}' else . '{' Commands '}'    (rule 18)

	'{'            shift, and enter state 110


State 110

	If -> if '(' Bexp ')' '{' Commands '}' else '{' . Commands '}'    (rule 18)

	id             shift, and enter state 18
	num            shift, and enter state 19
	'}'            reduce using rule 4
	if             shift, and enter state 20
	while          shift, and enter state 21
	val            shift, and enter state 22
	var            shift, and enter state 23
	'!'            shift, and enter state 24
	true           shift, and enter state 25
	false          shift, and enter state 26
	readln         shift, and enter state 27
	print          shift, and enter state 28

	Commands       goto state 111
	Command        goto state 9
	Readln         goto state 10
	Print          goto state 11
	If             goto state 12
	While          goto state 13
	Decl           goto state 14
	Assign         goto state 15
	Aexp           goto state 16
	Bexp           goto state 17

State 111

	If -> if '(' Bexp ')' '{' Commands '}' else '{' Commands . '}'    (rule 18)

	'}'            shift, and enter state 112


State 112

	If -> if '(' Bexp ')' '{' Commands '}' else '{' Commands '}' .    (rule 18)

	id             reduce using rule 18
	num            reduce using rule 18
	'}'            reduce using rule 18
	if             reduce using rule 18
	while          reduce using rule 18
	val            reduce using rule 18
	var            reduce using rule 18
	'!'            reduce using rule 18
	true           reduce using rule 18
	false          reduce using rule 18
	readln         reduce using rule 18
	print          reduce using rule 18


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 55
Number of terminals: 40
Number of non-terminals: 13
Number of states: 113
